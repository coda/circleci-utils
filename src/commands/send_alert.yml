description: Send build results to Opsgenie API, with detailed information
parameters:
  email_domain:
    default: coda.io
    description: |
        Optional email domain for users within the workspace. Must be specified if user aliases are not fully qualified.
    type: string
  endpoint:
    default: OPSGENIE_WEBHOOK
    description: Enter either your Full URL value that you copied in Opsgenie
      Integration Page
    type: env_var_name
  send_slack_failure:
    default: false
    description: Send slack notification for failures; default false
    type: boolean
  send_slack_success:
    default: false
    description: Send slack notification for success; default false
    type: boolean
  channel: 
    description: slack channel ID to send the message
    type: string 
    default: C02GSTENV19
  REPORTING: 
    description: slack channel ID to send the message
    type: string 
    default: $REPORT
steps:
- run:
    name: Check if in parallel
    command: <<include(scripts/check_parallel_py.sh)>>
    when: always 
- when:
    condition: <<parameters.REPORTING>>
    steps:
      - run:
          command: |
              echo "export EMAIL_DOMAIN=<<parameters.email_domain>>" >> "$BASH_ENV"
              echo "export ALIAS=${CIRCLE_PROJECT_REPONAME}/${CIRCLE_BRANCH}#${CIRCLE_JOB}" >> "$BASH_ENV"
              echo "export URI_ALIAS=${CIRCLE_PROJECT_REPONAME}%2F${CIRCLE_BRANCH}%23${CIRCLE_JOB}" >> "$BASH_ENV"
          name: Set variables
          when: always
      - run:
          name: Fetch User Information
          command: <<include(scripts/fetch_user_handles.sh)>>
          when: on_fail
      - run:
          name: Calculate LKG Diff Git URL
          command: <<include(scripts/get_lkg_hash_py.sh)>>
          when: on_fail
      - run:
          name: Send OpsGenie Failure Alert
          command: <<include(scripts/opsgenie_alert_py.sh)>>
          environment:
              OPSGENIE_BODY: <<include(message_templates/opsgenie_failure.json)>>
              STATUS: 0
          when: on_fail
      - run:
          name: Send OpsGenie Success Alert
          command: <<include(scripts/opsgenie_alert_py.sh)>>
          environment:
              OPSGENIE_BODY: <<include(message_templates/opsgenie_success.json)>>
              STATUS: 1
          when: on_success          
- when:
    condition:
      and:
        - <<parameters.REPORTING>>
        - or:
          - << parameters.send_slack_failure >>
          - << parameters.send_slack_success >>
    steps:
      - slack_notify_status:
          slack_tag: $SLACK_USER_TAG
          channel: << parameters.channel >>


